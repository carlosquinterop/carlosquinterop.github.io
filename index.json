[{"authors":null,"categories":null,"content":"I am a PhD candidate in Computer Science at Rice University, working under the supervision of Lydia Kavraki and Anastasios Kyrillidis. I am honored to have received a Fulbright Scholarship in 2019 to start my doctoral studies.\nI am interested in understanding how to plan safe motions for robots in unstructured environments. My goal is to provide robots with the capabilities of autonomously deciding and acting in environments that may have noisy or incomplete information or where humans may be present. To this end, I have explored the use of optimization and learning-based methods into robot motion planning to enable safe and efficient robot motion.\nBefore joining Rice, I was an instructor and researcher at Universidad de los Andes and Universidad Santo Tomás where I thaught courses mainly in Electronic Engineering, Robotics and Machine Learning. During this time I had the chance to join the RoboCup community by becoming part of the STOx\u0026rsquo;s team of the Small Size League (2014-2017), serving as TC member in 2018 and by co-founding the SinfonIA team of the @Home Social Standard Platform League in 2019.\nDownload my resumé.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1704414090,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a PhD candidate in Computer Science at Rice University, working under the supervision of Lydia Kavraki and Anastasios Kyrillidis. I am honored to have received a Fulbright Scholarship in 2019 to start my doctoral studies.","tags":null,"title":"Carlos Quintero-Peña","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1610396969,"objectID":"5942a7bdc0957edb5bc264591d7ea36d","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"Sean Farrell","type":"authors"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"There exists a plethora of highly efficient methods for motion planning when the environment representation is perfectly known. Typical representations include meshes and geometric primitives that resemble objects in the environment. However, when the information about the environment comes direclty from sensors the situtation changes. It is still not clear how to incorporate this information into existing motion planning algorithms in a safe and reliable way. A common approach consists of computing intermediate representations such as planes, meshes and occupancy information using sensor data. However, this naive integration may fail in guaranteeing that the computed robot motions are safe when executed by the robot. This is especially true for high-DoF manipulators where simplifying assumptions do not hold.\nWe propose a stochastic implicit neural signed distance representation that 1) models sensor uncertainty directly and therefores does not require exact knowledge of the environment geometry and 2) that can provide important no-collision information in the robot configuration space that we use to formulate a hierarchical chance-constrained motion planner to generate minimal risk motions that are guaranteed to respect a maximum bound on a given probability of collision and are efficiently solved using off-the-shelf solvers.\nSensing uncertainty quantification The figure below shows a diagram of our neural representation to quantify the uncertainy coming from the sensor. Inspired by recent trends on implicit representations we pose the problem as variational inference by learning a probability distribution over signed distances for each robot link conditioned on a point in space. This is paramount since it provides 1) uncertainty estimates of distances that can be incorporated into a safe motion planner and 2) directions in the robot\u0026rsquo;s configuration space to avoid collisions from noisy points. We use this information to formulate a safe motion planner based on optimization that can be efficiently solved.\nOur stochastic implicit neural signed distance functions use a) a robot configuration q and b) one noisy point x as input. c ) Inputs go through a positional encoding layer and then through 4 fully connected layers of size 256. Finally, two separate layers of size K output the mean and standard deviation parameters of d) each link\u0026rsquo;s distribution modeling the noisy signed distance conditioned on q, x. Chance-constrained hierarchical planning We propose a hierarchical planner that first uses the noisy information from the sensor to compute a candidate path that is later processed by a sequence of chance-constrained inverse kinematic optimization-based solvers using the uncertainty information from the neural representation. We propose a novel reformulation of the joint chance constraint that represents the no-collision information between the robot and the environment and show that it can be solved efficiently and to global optimality by off-the-shelf solvers for realistic motion planning problems.\nResults We ran experiments on 50 different instances of problems from MOTIONBENCHMAKER where the environment was represented by small spheres that covered the actual geometry. Each problem has different start/goal configurations coming from variations in the grasped object and the robot\u0026rsquo;s relative pose with respect to the table. Obstacles in the table are also randomly sampled. We compared our method with a baseline where each sphere radius is increased by certain percentage. To assess the performance of the methods we estimated the true probability of collision by running a Monte Carlo simulation with 20.000 samples for each computed path. The candidate paths were computed using RRT-Connect. The results are shown below.\nEstimated CDF of the risk attained by each method on all 50 problems. ","date":1693526400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704414090,"objectID":"f111d7668a28d4be6ea8b1d7819fccd6","permalink":"https://carlosquinterop.github.io/project/impdist/","publishdate":"2023-09-01T00:00:00Z","relpermalink":"/project/impdist/","section":"project","summary":"Safe motion planning approach for noisy sensor measurement representation of the environment using a stochastic neural implicit representation and chance constrained optimization.","tags":["Optimization","Motion Planning","Robotics","Learning"],"title":"Stochastic Implicit Neural Signed Distance Functions for Safe Motion Planning under Sensing Uncertainty","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"Planning for sequential manipulation in robotics is paramount. This is typically achieved by a layered planning approach (called Task and Motion Planning - TAMP) where a skeleton is computed by a task planner first and then the robot motions for the actions within this skeleton are computed by a motion planner. Before the motions can be computed, continuous values of the action parameters need to be first resolved (this is called grounding). For example, to compute the motion to pick up an object, the grasp pose (i.e. the relative pose of the robot\u0026rsquo;s end-effector with respect to the object) needs to be computed first. To place an object in a surface, the new object location is required. Most TAMP frameworks rely on specialized samplers to obtain these parameters and they do not consider complex geometric constraints that can arise in the presence of cluttered environments. We contribute a specialized grounder for placements and grasps that considers all the actions of a plan skeleton jointly for problems of planar manipulation under heavy cluttered scenes.\na) Baseline TAMP with grounder based on random sampling. b) Our approach is based on convex optimization of the whole plan skeleton Our grounder is designed to solve problems of planar manipulation, where the robot is required to pick up and place a sequence of objects on a surface and there is potentially many objects of different heights. Additionally, we argue that these problems are hard because they have a very little amount of free space to be used as intermediate placement locations for objects. This setup is similar to a problem known as Object Rearrangement (OR), but unlike OR, we do not assume action feasibility, i.e., the robot hand may collide with another object when placing the grasped object due to their geometry. Additionally, our setup considers other scenarios where objects can be stacked on top of other objects (i.e., high-level actions other than pick and place are considered).\nOur solution To solve these problems we propose a specialized grounder that is formulated as an optimization problem over the joint variables of candidate plan skeletons. We describe feasibility constraints (no collision) as non overlapping primitive shapes over conservative approximations of the projections of the robot hand and the objects (see figure below). By performing this simplification, we are able to write problems that can be solved up to global optimality very efficiently. Furthermore, infeasibility of our optimization formulations provides useful information that we use to prune the task space to find plan skeletons that are more likely to be feasible.\nGeometric primitives (circles and AABBs) are used as conservative approximations of the robot hand and objects\u0026rsquo; geometry on the supporting surface. Feasibility constraints are defined as non-intersection of pairs of primitives along the plan skeleton. The resulting optimization problems can be solved to global optimality. Challenging problems The proposed problems are hard due to the high clutter and small amount of free space to place objects. Additional geometric constraints arise when the robot tries to pick up a short object next to a tall object since the robot geometry may collide with the neighbor object.\nObstructed Pick X (OP-X): a short object that is surrounded by tall objects needs to be grasped and placed in a given goal location. All other objects doe not have a specified goal. This experiment is increasingly hard for high values of X and we show up to OP-9. Chessboard (Chess): The robot needs to set up the blue pieces of the chess in the starting configuration. For each piece, we compute a cylinder that fully contains the mesh representation to express the feasibility constraints and use the circle of its base as geometric primitive. Tower Assembling (Tower): The robot needs to assemble a tower with three blocks at a goal location in the given order. Before that, the objects are stacked and therefore they need to be unstacked first. When unstacking them, intermediate locations are needed and other objects on the surface need to be avoided. This is an example of a task that involves highl-level actions other than pick and place (stack and unstack). ","date":1680307200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704414090,"objectID":"e8fb07025bf82c650941b2fd691d1a80","permalink":"https://carlosquinterop.github.io/project/tamp-clutter/","publishdate":"2023-04-01T00:00:00Z","relpermalink":"/project/tamp-clutter/","section":"project","summary":"Task and Motion Planning framework that combines a SMT-based task planner, sampling-based motion planners and a novel optimization-based grounder to find optimal object placement locations and robot grasps for cluttered environments.","tags":["Optimization","Motion Planning","Robotics"],"title":"Optimal Grasps and Placements for Task and Motion Planning in Clutter","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"Evaluating motion planning algorithms for high degree-of-freedom robots (i.e., manipulators) can be challenging and time consuming, prone to bias and hard to compare against state-of-the-art planners. Additionally, with the advent of learning methods in planning for robotics, it is paramount to have the ability to generate datasets of meaningful problems to train and evaluate new models. In this paper we introduce MotionBenchMaker, an open source tool to generate datasets for bechmarking and training for realistic robot manipulation problems. Our tool is designed to be easy to extend to support new problems and robots and comes with tools to easily perform motion planning benchmarking.\nFeatures of MotionBenchMaker These are some of the features that MotionBenchMaker offers:\nIt is written on C++ It supports ROS and MoveIt making it easy to integrate into existing robotics implementations Configuration of new environments and robots is done through standard formats such as yaml, urdf, srd files. It comes with sampling-based planners from OMPL such as RRT-Connect, PRM, KPIECE, etc. It provides tools to easily specify environment transformations to automatically generate interesting motion planning problems, such as problem generator and scene sampler. It comes with prefrabicated datasets that comprise 5 commonly used robots and 8 environments that are actively being used by the community to assess the performance of new motion planning algorithms. Scene Sampler and Problem Generator The main functionality of MotionBenchMaker is its ability to create new problems by 1) easily specifying (random) transformations to objects from a nominal scene to generate distinct problems from a similar domain and 2) automating the way to specify motion planning problems (start/goal configurations) for manipulation problems by describing relationships between robot end-effectors and objects in the scene. The first component is achieved by a scene sampler which can perform SE(3) sampling to objects in the scene as well as URDF sampling as shown in the figure below:\nGiven a nominal scene (left), the scene sampler generates variations by performing (right) SE(3) sampling as well as URDF sampling of kinematic structures of a scene (such as the doors of a cabinet). Sampling parameters are specified using descriptor files. The Problem Generator takes as inputs a robot description (URDF), a geometric scene and object-centric end-effector poses and create a motion planning problem (start and goal configurations in the form of a MoveIt! request). Additional transformations to specify the robot base pose can be specified. The figure below shows examples.\nGiven the information on the left, the problem generator performs inverse kinematics and all the appropriate transformations to compute a fully defined motion planning problem, i.e., start and goal configurations, providing an abstract interface that is robot-agnostic and ready to use. Prefabricated dataset MotionBenchMaker comes with a set of prefabricated problems that are interesting motion planning queries with commonly used robots.\nPrefabricated problems that come with MotionBenchMaker ","date":1635724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704418269,"objectID":"b05aff77ae348469072429fed18134a4","permalink":"https://carlosquinterop.github.io/project/motionbenchmaker/","publishdate":"2021-11-01T00:00:00Z","relpermalink":"/project/motionbenchmaker/","section":"project","summary":"Open source tool to generate benchmarking datasets for robot manipulation problems.","tags":["Motion Planning","Robotics","Learning"],"title":"MotionBenchMaker A Tool to Generate and Benchmark Motion Planning Datasets","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"This project is concerned with the problem of motion planning for high-DOF robots under partial observability using guidance from humans. We have proposed Bayesian Learning in the Dark (BLIND), an algorithm that leverages the human senses to compute high-DOF robot trajectories that are safe despite partial observability of the environment. The main components that made up BLIND are shown next\nBLIND algorithm The construction of a low-dimensional discrete state space and the guided motion planner are the two main novelties within BLIND. The former leverages projections and sampling-based motion planners to create a space where reward learning can be performed. The latter uses optimization-based motion planning to incorporate the knowledge learned from the human as motion constraints.\nThese two together enable reward learning techniques to be used using critiques to learn and compute high-dimensional safe trajectories despite the incomplete environmental information.\nThe results show that BLIND outperforms state-of-the-art methods in teaching effort, success rate and path length.\nResults of simulated experiments in the Box and Stove environments Check out our video of a robot implementation of BLIND, where a human user is asked to critique trajectories that are potentially unsafe. BLIND is executed in real-time and it converges to a safe solution.\n","date":1630454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704749157,"objectID":"82a2585cc9d63290b8f92df2071d32b2","permalink":"https://carlosquinterop.github.io/project/blind/","publishdate":"2021-09-01T00:00:00Z","relpermalink":"/project/blind/","section":"project","summary":"Human-in-the-loop algorithm to compute joint-space trajectories for high-DoF robots under partial observability","tags":["Optimization","Motion Planning","Robotics","Learning"],"title":"Human-Guided Motion Planning in Partially Observable Environments","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"The objective of the project is to simulate the Fetch robot in a realistic environment considering uncertainty. In order to accomplish this we needed to take into account the complexity of a real robotic platform, starting with the topics covered during the course, i.e., kinematics, dynamics, control, but also others that were either briefly discussed or not at all, such as sensing, localization, motion planning, etc. Instead of building or analyzing all of these from scratch for the Fetch robot, we used a large software stack based on ROS (Robot Operating System). In the project, all of these were integrated in order to solve the problem of successfully planning and executing a grasping task in the presence of uncertain obstacles. The following are the main software components of the solution and a brief description of what was done in this project with each one:\nGazebo: It is the physics simulator where the world and robot are modeled. For the project I created the testing scenes by creating first objects (cylinders in this case) that represent cans and wooden tables. Each graspable object required a grasping pose that the robot knows beforehand that is used to compute the goal configuration for every can. The poses in ROS are represented as a $3D$ vector that represents the position and a $4D$ vector that represents its orientation as a quaternion. The figure below shows an example of one Gazebo scene\ntf2: It is a ROS package that provided all the transformations between the different frames in the world. The robot geometry is already known for the the package and the transformations are given as abstract objects that can be operated as we operate transformation matrices. We used these transformations to compute the frame origins of the robot\u0026rsquo;s links that were part of the planned trajectory\nMoveIt: It is a ROS package that provides access to a set of sampling-based planners available in OMPL. Plans are represented as a sequence of robot states (joint configurations) that are created from the group of joints that is used to plan. For this project we created a group for the 7 arm joints and the torso and therefore, each state could be represented as an 8-dimensional vector. This package also provides controller functions for executing the planned trajectories. The trajectory was required to be time-parameterized before passing it to the controller. The controller also provides a way to receive feedback on whether the given trajectory was successfully executed or not. This was required for the experiments\nOctomap: It is a library that efficiently stores and manages data that comes from cloud points such as those captured with a RGB-D camera. The octomap represents the world by classifying parts of the space as free, mixed (free/occupied) or unknown. It creates boxes and each box is labeled as one of the possibilities. If the box is empty it stores it with a large resolution, if the box is mixed, it further split it into smaller boxes and it keeps doing that until all are free or occupied or a resolution limit is reached. It was used in this project to represent the scenes. In the experiments, we used a query function to know whether a given point in space was already explored or unknown. The figure below shows a scene representation using octomaps.\nQuickhull: It is a library that provides fast computation of the convex hull of a set of points in three dimensions. It was required in the project to estimate the swept-out volume of a given trajectory\nScene and Fetch robot in Gazebo simulator Octomap representation of the scene obtained by the on-board RGB-D camera of the robot THE EXPERIMENTS In order to succeed in the task of planning and executing a motion to grasp an object with sensor data, we needed to improve the scene representation. In many cases, it turned out that the robot was capable of successfully finding a plan but it failed in executing it because the scene was incomplete. This happens because the planner uses unknown space as free. The trivial solution of changing all the unknown space to occupied would not work because it becomes extremely likely that no path would be found since only a small part of the space is actually known by the robot. This assumption is also necessary to allow robots that do not know their entire environment to be able to explore it.\nThe figure below shows a diagram of the general proposed solution. The idea is to start a plan with the current known scene and then use this plan to extract points that the robot needs to explore before executing the trajectory to make sure that it will succeed (it won\u0026rsquo;t collide). After that, this points are examined to determine whether they are known or not and we command the robot to look at the set of those points that are unknown. Finally, the robot will create a new plan with the updated scene and will repeat this process until finding a safe plan (one where all the interesting points are in known space).\nDiagram showing the main steps of the proposed methodology In order to decide which points are interesting to look at, we have explored four different strategies, described below:\nObject: Instead of using the planned trajectory, the robot only looks at the object Fixed points: The robot looks at two points at each side of the object Frame origins: The robot considers all the arm\u0026rsquo;s link origins for all joint configurations of the planned path Swept-out volume: The robot considers the volume swept-out by the arm if the trajectory were executed. The volume is estimated by computing the convex hull of consecutive joint configurations in the planned path The figure below shows an image of the robot simulation looking at unknown points of the swept-out volume marked as red arrows. In order to compare the four strategies, we designed the following experiment: we place the robot base in a random position and orientation close to the tables. We randomly choose one can from all in the scene. Then, the robot implements the proposed methodology to create a plan to grasp the selected object using one of the strategies described above and finally the robot executes the trajectory. At that point, there are several possible outputs; the robot is able to succeed in the execution of the trajectory (i.e., it does not collide with obstacles and it reaches the grasping pose), the robot fails in executing the trajectory, the robot can not find a path to solve the problem at hand. For the cases of frame origins and swept-out volume strategies, the robot only executes the trajectory when the planner outputs a plan and all the interesting points are in the known region of the space. If the robot makes three planning attempts and it is still not able to find a completely safe path, it takes the risk and executes the current, potentially unsafe plan. This may or may not end up in collision but it is done to make sure that the algorithm won\u0026rsquo;t get stuck in infinite loops and also to avoid excessively large simulation times, especially because there might be points in space that could be occluded.\nFetch robot looking at interesting unknown points of the swept-out volume of the computed trajectory Each strategy was tested when 50 trajectories were executed and the time taken to complete the scene was measured for every strategy. Each motion planning problem is independent of the previous, meaning that the knowledge of the previous scene is not used before solving the next problem.\nRESULTS The table below show the results of the 50 runs for each strategy. As expected, the simple object and fixed points strategies take much less time in looking before executing the planned trajectory since they choose fixed points. However, it can also be seen that their probability of collision is much higher; much more than half of the different trials were not successfully solved. The frame origins and swept-out volume strategies effectively increase the probability of succeeding in the task execution since they take into account important points in the planned trajectory. Also, even though they take much more time than the simple strategies, this time is worth in applications where safety is a priority. Finally, these strategies can also create unsafe trajectories since a maximum number of attempts is considered. This number could be increased to further reduce the chances of obtaining unsafe trajectories at the expense of more time taken to look.\nResults of $50$ runs for the proposed methodology for completing the scene for the 4 different explored strategies In the following video you can see the robot doing the described task for different sets of random scenes. The robot creates a trajectory and then looks at all the important points in the trajectory that are in unknown space (red arrows) until all of them are blue.\n","date":1617235200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704414090,"objectID":"63efa76905d1a559c7081836442db9ea","permalink":"https://carlosquinterop.github.io/project/incomplete-sensing/","publishdate":"2021-04-01T00:00:00Z","relpermalink":"/project/incomplete-sensing/","section":"project","summary":"A Fetch robot doing Motion Planning and executing a trajectory when the scene representation may be incomplete","tags":["Robotics","Motion Planning","Sensing Uncertainty"],"title":"Motion Planning with incomplete scene information","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"Motion planning for high degree-of-freedom ( DOF ) robots is challenging, especially when acting in complex environments under sensing uncertainty. While there is significant work on how to plan under state uncertainty for low- DOF robots, existing methods cannot be easily translated into the high-DOF case, due to the complex geometry of the robot’s body and its environment.\nThe figure above shows an example of a Fetch robot performing manipulation tasks in a table environment. The objects on top of the table are subject to sensing uncertainty in the direction shown by the arrow. The objective is to find a plan to move the green can from its starting position (to the left of the robot) to its goal position, while taking into account the object\u0026rsquo;s uncertainty. The shown trajectory was computed by our proposed method Robust Optimization-based Motion Planner (ROMP).\nWhen we have perfect information about the location of objects in a given scene, motion planning methods provide an efficient way to solve our high-DOF manipulation problem. Sampling-based and Optimization-based methods stand out for this task. The former methods, build connectivity information in the robot\u0026rsquo;s configuration space by means of random sample and use such information to find a path between start and goal. The latter methods optimize cost functions that encourage smooth trajectories constrained to stay collision-free. RRT-Connect and TrajOpt are representatives of each category.\nThe figure below shows top views of Fetch trajectories found by RRT-Connect, TrajOpt and the proposed ROMP, for our manipulation example. Importantly for this application, all planners generate trajectories that go close to the noisy obstacle. This is achieved by using a shortcut heuristic to the plan returned by RRT-Connect. TrajOpt on the other hand naturally encourages short trajectories. It can be seen that ROMP\u0026rsquo;s trajectory stays further away from the noisy object.\nThe target here is not to compare the proposed approach with existing methods. That would not be a fair comparison since they are unaware of the obstacles\u0026rsquo; uncertainty. Our objective is to provide a method to incorporate this type of uncertainty when planning and highlight its benefits compared to not taking the uncertainty into account.\nTop view of trajectories generated by different planners in the manipulation task How does ROMP work? ROMP can be thought of as an extension of optimization-based planners to account for uncertainty information. It is based on sequential convex optimization (SCO), where the non-convex collision avoidance constraints are linearized around the current solution and a quadratic program is solved at every iteration. A key difference with respect to optimization-based uncertainty unaware planners (e.g., TrajOpt) is that at every iteration of the SCO problem, ROMP creates a robust optimization formulation that protects the solution of the convex subproblem to uncertainty in the problem parameters. The uncertainty of this parameters comes from the uncertainty in the signed distance function between the noisy obstacle and the robot\u0026rsquo;s links and is assumed to be bounded. In its current version, the uncertain parameters lie in a cardinality constrained set.\nTwo important aspects make ROMP attractive to be used for robust motion planning. On one hand, it can be applied to high-DOF robots since its formulation leverages the signed distance collision-avoidance constraints proposed by the authors of TrajOpt. Other robust planners in the literature assume that the robot can be modeled as a point in the task space. This assumption works well for applications where the robot\u0026rsquo;s body is small compared to its environment (e.g., drones or small car-like robots), but is not suitable for manipulators made of complex geometry. On the other hand, ROMP does not require the sensing uncertainty to be modeled using Gaussian noise (or other specific type of probability distribution). Its only assumption is that the uncertainty of the parameters is bounded and that one can have access to sample from the distribution. Most methods in the literature require the Gaussianity assumption, which may limit their applicability.\nAt each iteration, ROMP solves the following convex optimization problem:\nRobust Optimization convex subproblem solved by ROMP The parameters of this robust formulation need to be estimated at every iteration. This can be achieved by allowing ROMP to sample from the distribution of the noisy objects and keeping the maximum deviation of each parameters from its expected value. ROMP also modifies the actual merit function to account for the additional robust terms being added to the convex subproblems to enable convergence of the SCO algorithm.\nSome experiments We performed experiments to assess the performance of ROMP to a different set of noise models. To this end, we created a nominal scene of the fetch robot example and solved the motion planning problem using RRT-Connect, TrajOpt and ROMP. Then, we evaluated the probability of collision of such trajectories for both Gaussian and Uniform noise for a wide set of the distribution parameters using Monte Carlo experiments for 5000 samples for each distribution. The results can be shown in the figure below:\nMonte Carlo results for the uncertain motion planning manipulation task It can be seen that ROMP successfully maintain a low probability of collision for all the distribution parameters (Gaussian on the left, Uniform on the center). Additionally, the figure on the right shows the average distance to collision between the robot and the noisy object for each trajectory waypoint and its standard deviation for both TrajOpt and ROMP.\nThe figure below show examples of more trajectories computed by the planners for the same task but when the grasp pose is different.\nRobust Optimization convex subproblem solved by ROMP It can be noticed that similar to the previous example, RRT-Connect and TrajOpt find trajectories that go very close to the obstacle. ROMP however, pushes the trajectory closer to the robot\u0026rsquo;s body to account for the uncertainty in the direction of the noise. The following video shows the trajectory traces.\n","date":1617235200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704414090,"objectID":"3507a91d4d939ae08b94f1420571fb6f","permalink":"https://carlosquinterop.github.io/project/sensing_uncertainty/","publishdate":"2021-04-01T00:00:00Z","relpermalink":"/project/sensing_uncertainty/","section":"project","summary":"Optimization-based motion planning algorithm capable of incorporating sensing uncertainty for a variety of noise models","tags":["Optimization","Motion Planning","Robotics"],"title":"Robust Motion Planning under Sensing Uncertainty","type":"project"},{"authors":["Carlos Quintero-Peña","Sean Farrell"],"categories":null,"content":"This project provides a literature review for the most important recent works related to optimizing high-dimensional non-convex functions in the presence of saddle points mostly for machine learning applications.\nThe inspiration came from reviewing the paper \u0026ldquo;How to Escape Saddle Points Efficiently?\u0026rdquo;. A large research effort has been devoted to proposed methods that can converge to second order stationary points efficiently. Of special interest is the set of methods that do not rely on Hessian computation, mainly driven by applications in machine learning where this may not be feasible. Although, many important theoretical results have been proposed, many of them have not be tested in real experiments, especially in the context of training a deep neural network. We have designed experiments with different network architectures and state-of-the-art datasets to observe the behavior of perturbed versions of gradient descent. Initial results show that an improvement in experimental convergence rate can be seen only for small and shallow networks.\n","date":1610323200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610470293,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://carlosquinterop.github.io/project/example/","publishdate":"2021-01-11T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"Review of optimization algorithms that can escape saddle points in Deep Learning and some experimental results","tags":["Deep Learning","Optimization","Gradient Descent"],"title":"Can Theoretical Algorithms Efficiently Escape Saddle Points in Deep Learning?","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"This project was a lab assignment in the course MECH 498: Introduction to Robotics that I took during the Spring of 2020 offered by Dr. Marcia O\u0026rsquo;Malley. I thought this project was a lot of fun and so I decided to share the main results here. The assignment was about computing the inverse kinematics (IK) problem for a 6-DOF FANUC S-500 robot shown above.\nThe project was coded using MATLAB where we were given a model of the FANUC robot and were asked to implement both its forward kinematics and inverse kinematics. The robot is provided with a drawing tool attached to its end-effector with 4 different brushes and the objective is to give the robot a 3D discretized path that contains the points that make the drawing (a Mickey Mouse face in our case!), so that the robot can draw it. By solving an IK problem for each point in the trajectory and plot them all we can see how the robot model draws the given trajectory. Notice that there are additional challenges to avoid the robot to change between \u0026rsquo;elbow up\u0026rsquo; and \u0026rsquo;elbow down\u0026rsquo; configurations in consecutive points of the trajectory.\nTo make it slightly more interesting we decided to make the robot plot in two different planes for the same drawing, similar to paintings that are drawn in the corner of a room. Checkout the video to see our robot painting the Mickey Mouse face between two walls and notice how the orientation of the tool is changed when the second half of the face is being painted.\n","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704749157,"objectID":"312a615bb7a3888b3b9f35fdb4079a0d","permalink":"https://carlosquinterop.github.io/project/robo-picasso/","publishdate":"2020-03-01T00:00:00Z","relpermalink":"/project/robo-picasso/","section":"project","summary":"Solving the inverse kinematics problem for a FANUC S-500 robot and using it to draw a Mickey Mouse","tags":["Robotics"],"title":"Inverse Kinematics Robo Picasso","type":"project"},{"authors":["Carlos Quintero-Peña"],"categories":null,"content":"Machine learning - and especially deep learning - is a big trend these days; not only in research, but in many other domains. Large companies, start-ups, governments and many other actors have realized the importance on the use of massive available data to leverage their businesses and achieve more complex tasks than before. During the last decade, the size of machine learning models and the amount of data that they can efficiently process have significantly increased, in part due to the highly notable improvement of hardware technology especially tailored to meet the need of these models. Distributed computing has been an important resource to build large machine learning models. However, it is still not clear how to efficiently split the parameters of giant networks across distributed computing resources to achieve efficient training results. The nature of the gradient descent algorithm, that requires dense and sequential updates, leads to communication bottlenecks or accuracy degradation. Ideally, we would have asynchronous updates without hurting performance.\nOther type of important applications for large machine learning models is in the mobile phones and low-resource devices. In these cases it is extremely important that training and inference costs (i.e., the costs of using the model to predict new values) are energy-efficient, since these may be implemented by the user in their own devices and long lasting battery life is a key requirement. Graphic Processing Units (GPU) are capable of achieving large amounts of computational operations, including matrix multiplication which is a key operation in training/inference processes of a Deep Neural Network (DNN). However, they are not, in general, energy-efficient. Only expecting that hardware designers reduce the energy cost of these operations at the hardware level is not possible since these enhancements may be slow, are mostly driven by commercial demands and may be highly expensive and risky.\nAn important common ground for the two scenarios described above is the fact that there are limits for hardware acceleration for machine learning models, either because algorithm characteristics restrict the massive parallelization on large distributed systems with high communication costs or because powerful available hardware are not very energy-efficient when building and evaluating machine learning models. One solution that will be discussed is to mostly rely on algorithmic improvements rather than only hardware acceleration.\nOther important and related problem is the one of model representation. In general, we know that growing the size of deep learning models and the data used to build such models is beneficial to increase their accuracy. However, there are several issues that arise when trying to increase both. On one hand, the problem discussed above, about specialized distributed hardware, holds in this scenario since it is not possible to fit this amount of data and models into one single machine. Furthermore, all the required synchronism cost and larges amount of computation pose a big challenge. In these cases, conditional computing, where large parts of a network are active or inactive based on the current example, is a big promise.\nOne key concept that has allowed the realization of large models with state-of-the art performances under the constraints mentioned before is that of sparsity. One can think of sparseness in a deep network at different levels. For instance, one way to control the network complexity is dropout; a well known regularization technique that randomly turn off certain neurons of the network during training. Other coarser level of sparsification include the use of conditional computation where networks that are controlled by a gated network can be active or not depending on the specific input. This sparseness may bring ways to approach the desired asynchronous parameter updates since it makes the gradient also sparse. We will guide the discussion about sparsity for training deep networks in efficient manners by using the proposed papers. On one hand, the paper \u0026ldquo;Scalable and Sustainable Deep Learning via Randomized Hashing\u0026rdquo; is a type of adaptive dropout that uses randomized hashing to dramatically reduce the computation of neuron activations. The second paper \u0026ldquo;SLIDE : In Defense of Smart Algorithms over Hardware Acceleration for Large-scale Deep Learning Systems\u0026rdquo; presents the SLIDE framework which relies on algorithmic and data-structural design to minimize computational overheads. The authors provide a C++ implementation that can outperform the best implementation on tailored hardware by orders of magnitude. Finally, the paper \u0026ldquo;Outrageously Large Neural Networks: The Sparsely-gated Mixture of Experts Layer\u0026rdquo; written by Geoffrey Hinton and his group at Google shows a model based on conditional computation to increase a model capacity to be able to absorb huge amounts of data. Their models have up to $137$ billion parameters and can significantly improve state-of-the-art results at lower computational cost.\n\u0026quot;Scalable and Sustainable Deep Learning via Randomized Hashing\u0026quot;\nThe core idea behind this paper attempts to solve the fundamental problem of achieving energy-efficient architectures for deep neural networks as well as asynchronous parameter updates in both training and inference. It does so by dramatically reducing the number of computations in the network by using sparsity. To achieve this, the authors propose to use a special form of adaptive dropout that relies on randomized hashing. In the idea of adaptive dropout, nodes in the network with low activation values are discarded. This has the described effect of controlling the network complexity but it also reduces the amount of computation since at every training/inference iteration, less operations are required. Previous approaches such as vanilla adaptive dropout and Winner-Take-all (WTA) require to choose the set of nodes for which the the activation is higher. To achieve this, these methods need to perform full computation of activations, although in the case of WTA only a certain percentage of activations are kept. An important idea behind these techniques is that of selecting neurons randomly according to some monotonic function of their activation, i.e., neurons are selected with higher probability if their activation is higher. The randomized hashing idea is that given an input $x$, its activation is a monotonic function of the inner product $w_i^{\\top}x$ and therefore the problem of selecting a set of nodes with largest activations can be efficiently approximated to that of maximum inner product search using asymmetric locality sensitive hashing (LSH). In LSH the idea is to map similar items into the same bucket with high probability so that their collision probability is higher if they are close according to some similarity measure. All these results finally allow one to very efficiently find a set of neurons per training iteration with high activation by indexing the neurons into hash tables tailored for inner products. Since LSH achieves sub-linear performance in the search problem, there is a great benefit on using this technique instead of having to compute the activations for all neurons (as in vanilla dropout) or computing the active set in $O(n\\log n)$ (as in WTA). At the end of the day, hashing is creating a probability distribution that is monotonic over the activations and applying the same core idea as in vanilla adaptive dropout but saving large amounts of computation.\nThis is a very interesting idea since it effectively shows that neurons into a deep neural network specializes and only contribute important information for some specific examples and furthermore it shows that a large amount of this redundant computation can be avoided by cleverly using efficient techniques such as LSH. In addition to this, the specific sparsity that arises by not considering the output of low activation neurons can be taken into account to perform sparse gradient updates. According to our discussion above, this is a highly desirable result since it easily allows one to perform distributed and asynchronous updates.\n\u0026quot;SLIDE : In Defense of Smart Algorithms over Hardware Acceleration for Large-scale Deep Learning Systems\u0026quot;\nIn this paper the authors implement several implementation improvements over the sparse updates using LSH, such as initialization, the feedforward pass with hash table sampling, the sparse gradient update and others to finally attain a C++ implementation that is orders of magnitude faster than the best GPU implementation for state-of-the-art problems. Actually, the authors show a very good scalability of performance with respect to the number of cores mainly due to the asynchronous gradient updates. These papers express a very strong argument about the importance of clever algorithmic design with respect to hardware acceleration. Note that most of the ideas discussed here are not suitable for GPU implementation, since their performance drastically drops with sparse memory access. The successful of GPU computation is to achieve aligned-memory access to maximize bandwidth, which is generally, several times lower than processing power.\n\u0026quot;Outrageously Large Neural Networks: The Sparsely-gated Mixture of Experts Layer\u0026quot;\nThis paper, written by Google, deals with the issue of model representation. The desired objective is to dramatically increase model capacity but not computation to be able to absorb vast quantities of data available today. Note that naively increasing model size (i.e., increasing the number of layers and neurons and therefore the number of parameters) easily results in an equal increase in the amount of computation and memory footprint that may not be possible to train using current state-of-the-art specialized distributed hardware. The authors propose the use of conditional computation and specifically the sparsely-gated mixture of experts layer. Under this model, a mix of expert networks is trained using specialized gating network that selects a sparse combination of the experts for each input example. The final model results in a model with a larger number of parameters when compared to traditional dense models but with sparse computations, since depending on the input example, the gating networks select a handful of experts only to evaluate, saving high amounts of computation. One could argue that the core idea behind this methods is that every input is sparse in the world of concepts and, similar to the ideas discussed before, one can use such sparseness to reduce the amount of computation required to achieve good performance. Also aligned with the previous discussion, the MoE model can easily be parallelized since each expert\u0026rsquo;s learning process can be designed to fit in one machine, greatly reducing the high cost of communication and synchronization. Also, note that this model is similar but different to that of ensembles. Possibly the most important difference is that all data need to be fed into inidividual learners in ensemble methods, while this is not true in the case of MoE. The gating network can compute its output first and based on this computation, only the output of the selected experts is required. Finally and very important is the necessity of balancing the expert utilization to avoid the phenomena that comes out when the same experts are chosen over and over again. At first, the experts are chosen almost randomly, since the gating network is not fully trained, but every time an expert is favored it is chosen more often producing experts with large weights. This balancing is achieved by introducing an additional term to the loss function of the model. The results of this proposal are clear. Using the type of sparsity introduced by the mixture of experts one can create models with amounts of parameters that were not possible before and use these models with even larger amounts of data to improve the performance of difficult learning problems.\nThe topic of sparsity on deep neural networks convincingly shows that inputs are usually sparse in the world of concepts and furthermore that this can be used to dramatically reduce the number of computations required for training/inference either for achieving energy-efficient implementations, as required in many commercial and industrial applications, or to significantly increase model capacity that allows us to solve larger and more difficult problems where huge amounts of data is available. The reason why this sparsity is possible and is a good idea in deep neural networks may shed light on better understanding how the learning process of complex concepts and models works to create more sophisticated learning algorithms.\n","date":1575158400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704414090,"objectID":"964c9c0b7bfdb1cd2fac92603987c6bf","permalink":"https://carlosquinterop.github.io/project/pruning/","publishdate":"2019-12-01T00:00:00Z","relpermalink":"/project/pruning/","section":"project","summary":"Review of methods to prune neural networks","tags":["Neural Networks","Pruning","Learning"],"title":"Neural Network Pruning - A review","type":"project"}]